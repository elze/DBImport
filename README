The Main() resides in the file DBImport\DBImp.cs.

The purpose of this program is to import delimiter-separated files into a database. It is mostly useful for importing <a href="http://statcounter.com/">StatCounter</a> log files, but can be adapted to importing other text files. 

StatCounter is a service that lets you see visits to your website. Its free version only stores the last 500 visits; if you want more, you have to pay. Even the priciest version has a relatively low limit on the number of visits it stores. If you want to store all the visits to your website ever, you probably need to download them from StatCounter and import them into your own database.

StatCounter lets you download the visits in a CSV file. Each visit has ~ 20 fields: the IP address of the visitor, the date and time of the visit, visitor's browser, operating system, ISP, city, state, and country; referring URL, the URL of the page visited, etc. The fields are comma-separated and enclosed in quotes.

Some database clients already let you import CSV files, but I noticed that they don't do it perfectly (I'm looking at you, PHPMyAdmin). If a field contains a double quote, StatCounter escapes it by doubling it (converts it into double-double quote), and some database clients get thrown off by that. So I decided to write my own program for import, especially since I also want to do some processing of the fields before putting them in the database.

This program uses what I like to think of as plugins for various ways to extract the fields. So far I've written only one such plugin, called extractQuoteEnclosedDoubleQuoteEscapedFields. It assumes that the fields in the CSV file are enclosed in quotes and separated by commas; quotes inside the fields are also escaped by quotes, in other words, they are double-double quotes. That's the StatCounter format. If you have a CSV file where files are enclosed, separated, or escaped differently, you will need to write your own plugin.

To import the rows from a file into a database, we need to know the following things:

1. The name of the table we want to import to.

2. How the fields in the import file correspond to the column names in the table. Let's say our database table has more columns than the fields in the import file. Why would that be? Well, maybe during or after import we want to extract some special information from each record and store it in an additional field. The names of those fields are in a separate file. It has only one line, where it lists those comma-separated fields. The program will read this header file and conclude that each line in the import file consists of these, and only these, fields in the given order.

Both the table name and the header file name, along with more advanced configuration parameters, are specified in the app.config file.

<?xml version="1.0"?>
<configuration>
  <appSettings>
    <add key="DestinationTableName" value="page_visits" />
    <add key="HeaderFilePath" value="C:\Users\username\Documents\Visual Studio 2010\Projects\DBImport\DBImport\StatCounter-Log-Header.csv" />
  </appSettings>
</configuration>

For basic import, that's all you need. You will pass the import file name on the command line. In Windows command line, cd into the directory where your executable is, and run this:

DBImport <import_file_path>

e.g.

DBImport "C:\Users\your_username\Documents\Visual Studio 2010\Projects\DBImport\DBImport\StatCounter-Log-20121228.csv"

But there are more advanced options for import you could use if you like. Specifically, you can tell the program to process certain fields.

Many times a referrer URL is some ungodly string of several hundred characters. It's ugly and very unreadable, since it's full of seemingly random characters. In the middle of it there may be a nugget of information that gives you a hint what the visitor to your website was actually loooking for. This is especially true if they come to your website from image search, as is the case with most visitors to my website. Such a referring URL might look like this:

www.google.de/imgres?um=1&hl=de&sa=N&tbo=d&biw=1707&bih=663&tbm=isch&tbnid=nNgVi8wMS0QPGM:&imgrefurl=http://pic.geekitude.com/v/CFI/sfn_halloween2008/P1020920GirlAndBoyStompOnBalloon.jpg.html&docid=rUrJ8NobSH_33M&imgurl=http://pic.geekitude.com/d/6444-2/P1020920GirlAndBoyStompOnBalloon.jpg&w=800&h=753&ei=2ETfUKrJCMLRhAeojYHwBQ&zoom=1&iact=hc&vpx=2&vpy=2&dur=1688&hovh=218&hovw=231&tx=144&ty=153&sig=103665961324907566570&page=1&tbnh=147&tbnw=153&start=0&ndsp=19&ved=1t:429,r:12,s:0,i:124

In all this garble of characters, the only thing of interest to me is P1020920GirlAndBoyStompOnBalloon.jpg, because that's the image that brought the visitor to my website. 

The whole purpose of importing the logs into my own database is so that I could later view them in my own web application, and maybe manipulate them -- group them, sort them, label the interesting ones, delete the non-interesting ones. (This web application is a separate project from DBImport.) When I look at this web application, I want to see at a glance what brought each visitor to my website. So instead of the string like the above, I want to see just P1020920GirlAndBoyStompOnBalloon.jpg. If they came via a search query, I want to see the search terms. During import I might want to extract this important information from the referrer field, and store it in a separate field.

For this I wrote a method called compactifyReferringURL, and put it in the PluginManager.cs class. You can write your own method to do any kind of transformation on any field you want. To cause that method to be invoked, specify it in the app.config like this:

    <add key="transform_method.came_from" value="PluginManager.compactifyReferringURL" />

Here, the method name, PluginManager.compactifyReferringURL is the value of the key whose name is transform_method.came_from. "came_from" is the name of a Statcounter field that contains referring URL. If you want to transform another field, say, page_url, your key would be named transform_method.page_url. The "transform_method" prefix is required for indicating that this setting will contain a transformation method name for a particular field.

compactifyReferringURL extracts a lot of useful information, such as 

(1) search terms;

(2) image names.

So, for example, a referrer string like this

http://images.ask.com/fr?q=people dress up anime&desturi=http%3A%2F%2Fgallery.geekitude.com%2Fv%2Fsf%2Flinucon2005%2FhallCostumes%2F&initialURL=http%3A%2F%2Fwww.ask.com%2Fpictures%3Fimgc%3Dboth%26q%3Dpeople%2Bdress%2Bup%2Banime%26page%3D1%26o%3D15708%26l%3Ddir%26pstart%3D0%26qsrc%3D24&fm=i&ac=103&fsel=1&ftURI=http%3A%2F%2Fimages.ask.com%2Ffr%3Fq%3Dpeople%2Bdress%2Bup%2Banime%26desturi%3Dhttp%253A%252F%252Fgallery.geekitude.com%252Fv%252Fsf%252Flinucon2005%252FhallCostumes%252F%26imagesrc%3Dhttp%253A%252F%252Fgallery.geekitude.com%252Fd%252F471-3%252FCIMG0849PinkChocAnime.jpg%26thumbsrc%3Dhttp%

would produce a "compactified" referrer string like this: 

... people dress up anime ... CIMG0849PinkChocAnime.jpg ...

so I know what search terms brought a visitor to my site, and what picture those search terms lead to.

Regexes that match search terms are described in app.config like this: 

    <add key="search_term_regex.0" value="((q=|p=|ps=|searchfor=|search_term=|rw=).+)" />
    <add key="search_term_regex.1" value="((fps_PBCK_).+?)_" />

Regexes that extract image names from referrer strings are described in app.config like this: 

    <add key="image_extraction_regex.0" value="(?&lt;==).+(jpg|JPG|jpeg|JPEG|gif|GIF|png|PNG)" />
    <add key="image_extraction_regex.1" value="(?&lt;=url=|imagesrc=|desturi=).+" />

The logic of applying search terms regexes and image extraction regexes is not exactly the same. First, we chop up the referrer string into name=value& substrings. Then we apply all the search terms regexes to those pairs, to extract all the possible search terms. Then we apply image extraction regexes. The first one looks for any string that starts with "=" and ends with jpg, JPG, etc (common image file extensions), because any such string is most likely a URL of an image. If we find at least one of those, we stop. If we don't, we apply the second image extraction regex, which looks for URLs that don't end in an image file name, but that might be a URL that hints at an image. This logic isn't perfect, but in practice it captures almost all the meaningful substrings.

